{"moduleDefinition":{"range":[1,1,1,59],"value":{"type":"normal","normal":{"moduleName":{"range":[1,8,1,36],"value":["EveOnline","VolatileHostScript"]},"exposingList":{"range":[1,37,1,59],"value":{"type":"explicit","explicit":[{"range":[1,47,1,58],"value":{"type":"function","function":{"name":"setupScript"}}}]}}}}},"imports":[],"declarations":[{"range":[4,1,579,4],"value":{"type":"function","function":{"documentation":null,"signature":{"range":[4,1,4,21],"value":{"name":{"range":[4,1,4,12],"value":"setupScript"},"typeAnnotation":{"range":[4,15,4,21],"value":{"type":"typed","typed":{"moduleNameAndName":{"range":[4,15,4,21],"value":{"moduleName":[],"name":"String"}},"args":[]}}}}},"declaration":{"range":[5,1,579,4],"value":{"name":{"range":[5,1,5,12],"value":"setupScript"},"arguments":[],"expression":{"range":[6,5,579,4],"value":{"type":"literal","literal":");\n\n\nSystem.Collections.Generic.IReadOnlyList<Response.GameClientProcessSummaryStruct> ListGameClientProcesses()\n{\n    var allWindowHandlesInZOrder = WinApi.ListWindowHandlesInZOrder();\n\n    int? zIndexFromWindowHandle(IntPtr windowHandleToSearch) =>\n        allWindowHandlesInZOrder\n        .Select((windowHandle, index) => (windowHandle, index: (int?)index))\n        .FirstOrDefault(handleAndIndex => handleAndIndex.windowHandle == windowHandleToSearch)\n        .index;\n\n    var processes =\n        GetWindowsProcessesLookingLikeEVEOnlineClient()\n        .Select(process =>\n        {\n            return new Response.GameClientProcessSummaryStruct\n            {\n                processId = process.Id,\n                mainWindowTitle = process.MainWindowTitle,\n                mainWindowZIndex = zIndexFromWindowHandle(process.MainWindowHandle) ?? 9999,\n            };\n        })\n        .ToList();\n\n    return processes;\n}\n\nstring InterfaceToHost_Request(string request)\n{\n    return serialRequest(request);\n}\n\n\"exefile\")]\n    static public extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);\n\n    public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);\n\n    /*\n    https://stackoverflow.com/questions/19867402/how-can-i-use-enumwindows-to-find-windows-with-a-specific-caption-title/20276701#20276701\n    https://stackoverflow.com/questions/295996/is-the-order-in-which-handles-are-returned-by-enumwindows-meaningful/296014#296014\n    */\n    public static System.Collections.Generic.IReadOnlyList<IntPtr> ListWindowHandlesInZOrder()\n    {\n        IntPtr found = IntPtr.Zero;\n        System.Collections.Generic.List<IntPtr> windowHandles = new System.Collections.Generic.List<IntPtr>();\n\n        EnumWindows(delegate (IntPtr wnd, IntPtr param)\n        {\n            windowHandles.Add(wnd);\n\n            // return true here so that we iterate all windows\n            return true;\n        }, IntPtr.Zero);\n\n        return windowHandles;\n    }\n}\n\nstruct Rectangle\n{\n    public Rectangle(Int64 left, Int64 top, Int64 right, Int64 bottom)\n    {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n\n    readonly public Int64 top, left, bottom, right;\n\n    override public string ToString() =>\n        Newtonsoft.Json.JsonConvert.SerializeObject(this);\n}\n\n\nSystem.Diagnostics.Process[] GetWindowsProcessesLookingLikeEVEOnlineClient() =>\n    System.Diagnostics.Process.GetProcessesByName(\"user32.dll\", SetLastError = true)]\n    static public extern bool SetProcessDPIAware();\n\n    [DllImport(\"user32.dll\"\n                System.Threading.Thread.Sleep(beep.durationInMs);\n            else\n                System.Console.Beep(beep.frequency, beep.durationInMs);\n        }\n\n        return new Response\n        {\n            effectExecuted = new object(),\n        };\n    }\n\n    return null;\n}\n\nulong? FindUIRootAddressFromProcessId(int processId)\n{\n    var candidatesAddresses =\n        read_memory_64_bit.EveOnline64.EnumeratePossibleAddressesForUIRootObjectsFromProcessId(processId);\n\n    using (var memoryReader = new read_memory_64_bit.MemoryReaderFromLiveProcess(processId))\n    {\n        var uiTrees =\n            candidatesAddresses\n            .Select(candidateAddress => read_memory_64_bit.EveOnline64.ReadUITreeFromAddress(candidateAddress, memoryReader, 99))\n            .ToList();\n\n        return\n            uiTrees\n            .OrderByDescending(uiTree => uiTree?.EnumerateSelfAndDescendants().Count() ?? -1)\n            .FirstOrDefault()\n            ?.pythonObjectAddress;\n    }\n}\n\nvoid ExecuteEffectOnWindow(\n    Request.EffectOnWindowStructure effectOnWindow,\n    IntPtr windowHandle,\n    bool bringWindowToForeground)\n{\n    if (bringWindowToForeground)\n        EnsureWindowIsForeground(windowHandle);\n\n    //  TODO: Consolidate mouseMoveTo and simpleMouseClickAtLocation and simpleDragAndDrop?\n\n    if (effectOnWindow?.mouseMoveTo != null)\n    {\n        //  Build motion description based on https://github.com/Arcitectus/Sanderling/blob/ada11c9f8df2367976a6bcc53efbe9917107bfa7/src/Sanderling/Sanderling/Motor/Extension.cs#L24-L131\n\n        var mousePosition = new Bib3.Geometrik.Vektor2DInt(\n            effectOnWindow.mouseMoveTo.location.x,\n            effectOnWindow.mouseMoveTo.location.y);\n\n        var mouseButtons = new BotEngine.Motor.MouseButtonIdEnum[]{};\n\n        var windowMotor = new Sanderling.Motor.WindowMotor(windowHandle);\n\n        var motionSequence = new BotEngine.Motor.Motion[]{\n            new BotEngine.Motor.Motion(\n                mousePosition: mousePosition,\n                mouseButtonDown: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n            new BotEngine.Motor.Motion(\n                mousePosition: mousePosition,\n                mouseButtonUp: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n        };\n\n        windowMotor.ActSequenceMotion(motionSequence);\n    }\n\n    if (effectOnWindow?.simpleMouseClickAtLocation != null)\n    {\n        //  Build motion description based on https://github.com/Arcitectus/Sanderling/blob/ada11c9f8df2367976a6bcc53efbe9917107bfa7/src/Sanderling/Sanderling/Motor/Extension.cs#L24-L131\n\n        var mousePosition = new Bib3.Geometrik.Vektor2DInt(\n            effectOnWindow.simpleMouseClickAtLocation.location.x,\n            effectOnWindow.simpleMouseClickAtLocation.location.y);\n\n        var mouseButton =\n            effectOnWindow.simpleMouseClickAtLocation.mouseButton == Request.MouseButton.right\n            ? BotEngine.Motor.MouseButtonIdEnum.Right : BotEngine.Motor.MouseButtonIdEnum.Left;\n\n        var mouseButtons = new BotEngine.Motor.MouseButtonIdEnum[]\n        {\n            mouseButton,\n        };\n\n        var windowMotor = new Sanderling.Motor.WindowMotor(windowHandle);\n\n        var motionSequence = new BotEngine.Motor.Motion[]{\n            new BotEngine.Motor.Motion(\n                mousePosition: mousePosition,\n                mouseButtonDown: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n            new BotEngine.Motor.Motion(\n                mousePosition: mousePosition,\n                mouseButtonUp: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n        };\n\n        windowMotor.ActSequenceMotion(motionSequence);\n    }\n\n    if (effectOnWindow?.simpleDragAndDrop != null)\n    {\n        //  Build motion description based on https://github.com/Arcitectus/Sanderling/blob/ada11c9f8df2367976a6bcc53efbe9917107bfa7/src/Sanderling/Sanderling/Motor/Extension.cs#L24-L131\n\n        var startMousePosition = new Bib3.Geometrik.Vektor2DInt(\n            effectOnWindow.simpleDragAndDrop.startLocation.x,\n            effectOnWindow.simpleDragAndDrop.startLocation.y);\n\n        var endMousePosition = new Bib3.Geometrik.Vektor2DInt(\n            effectOnWindow.simpleDragAndDrop.endLocation.x,\n            effectOnWindow.simpleDragAndDrop.endLocation.y);\n\n        var mouseButton =\n            effectOnWindow.simpleDragAndDrop.mouseButton == Request.MouseButton.right\n            ? BotEngine.Motor.MouseButtonIdEnum.Right : BotEngine.Motor.MouseButtonIdEnum.Left;\n\n        var mouseButtons = new BotEngine.Motor.MouseButtonIdEnum[]\n        {\n            mouseButton,\n        };\n\n        var windowMotor = new Sanderling.Motor.WindowMotor(windowHandle);\n\n        var motionSequence = new BotEngine.Motor.Motion[]{\n\n            new BotEngine.Motor.Motion(\n                mousePosition: startMousePosition,\n                mouseButtonDown: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n\n            new BotEngine.Motor.Motion(\n                mousePosition: endMousePosition,\n                mouseButtonDown: new BotEngine.Motor.MouseButtonIdEnum[]{},\n                windowToForeground: bringWindowToForeground),\n\n            new BotEngine.Motor.Motion(\n                mousePosition: endMousePosition,\n                mouseButtonUp: mouseButtons,\n                windowToForeground: bringWindowToForeground),\n        };\n\n        windowMotor.ActSequenceMotion(motionSequence);\n    }\n\n    if (effectOnWindow?.keyDown != null)\n    {\n        var virtualKeyCode = (WindowsInput.Native.VirtualKeyCode)effectOnWindow.keyDown.virtualKeyCode;\n\n        (MouseActionForKeyUpOrDown(keyCode: virtualKeyCode, buttonUp: false)\n        ??\n        (() => new WindowsInput.InputSimulator().Keyboard.KeyDown(virtualKeyCode)))();\n    }\n\n    if (effectOnWindow?.keyUp != null)\n    {\n        var virtualKeyCode = (WindowsInput.Native.VirtualKeyCode)effectOnWindow.keyUp.virtualKeyCode;\n\n        (MouseActionForKeyUpOrDown(keyCode: virtualKeyCode, buttonUp: true)\n        ??\n        (() => new WindowsInput.InputSimulator().Keyboard.KeyUp(virtualKeyCode)))();\n    }\n}\n\nstatic System.Action MouseActionForKeyUpOrDown(WindowsInput.Native.VirtualKeyCode keyCode, bool buttonUp)\n{\n    WindowsInput.IMouseSimulator mouseSimulator() => new WindowsInput.InputSimulator().Mouse;\n\n    var method = keyCode switch\n    {\n        WindowsInput.Native.VirtualKeyCode.LBUTTON =>\n            buttonUp ?\n            (System.Func<WindowsInput.IMouseSimulator>)mouseSimulator().LeftButtonUp\n            : mouseSimulator().LeftButtonDown,\n        WindowsInput.Native.VirtualKeyCode.RBUTTON =>\n            buttonUp ?\n            (System.Func<WindowsInput.IMouseSimulator>)mouseSimulator().RightButtonUp\n            : mouseSimulator().RightButtonDown,\n        _ => null\n    };\n\n    if (method != null)\n        return () => method();\n\n    return null;\n}\n\nstatic void EnsureWindowIsForeground(\n    IntPtr windowHandle)\n{\n    var PreviousForegroundWindowHandle = BotEngine.WinApi.User32.GetForegroundWindow();\n\n    if (PreviousForegroundWindowHandle == windowHandle)\n    {\n        return;\n    }\n\n    BotEngine.WinApi.User32.SetForegroundWindow(windowHandle);\n}\n\nstring SerializeToJsonForBot<T>(T value) =>\n    Newtonsoft.Json.JsonConvert.SerializeObject(\n        value,\n        //  Use settings to get same derivation as at https://github.com/Arcitectus/Sanderling/blob/ada11c9f8df2367976a6bcc53efbe9917107bfa7/src/Sanderling/Sanderling.MemoryReading.Test/MemoryReadingDemo.cs#L91-L97\n        new Newtonsoft.Json.JsonSerializerSettings\n        {\n            //  Bot code does not expect properties with null values, see https://github.com/Viir/bots/blob/880d745b0aa8408a4417575d54ecf1f513e7aef4/explore/2019-05-14.eve-online-bot-framework/src/Sanderling_Interface_20190514.elm\n            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,\n\n            // https://stackoverflow.com/questions/7397207/json-net-error-self-referencing-loop-detected-for-type/18223985#18223985\n            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,\n        });\n\n\nvoid SetProcessDPIAware()\n{\n    //  https://www.google.com/search?q=GetWindowRect+dpi\n    //  https://github.com/dotnet/wpf/issues/859\n    //  https://github.com/dotnet/winforms/issues/135\n    WinApi.SetProcessDPIAware();\n}\n\nstatic public class WinApi\n{\n    [DllImport(\"The frequency must be between 37 and 32767.\");\n\n\nclass Request\n{\n    public object ListGameClientProcessesRequest;\n\n    public SearchUIRootAddressStructure SearchUIRootAddress;\n\n    public GetMemoryReadingStructure GetMemoryReading;\n\n    public TaskOnWindow<EffectOnWindowStructure> EffectOnWindow;\n\n    public ConsoleBeepStructure[] EffectConsoleBeepSequence;\n\n    public class SearchUIRootAddressStructure\n    {\n        public int processId;\n    }\n\n    public class GetMemoryReadingStructure\n    {\n        public int processId;\n\n        public ulong uiRootAddress;\n    }\n\n    public class TaskOnWindow<Task>\n    {\n        public string windowId;\n\n        public bool bringWindowToForeground;\n\n        public Task task;\n    }\n\n    public class EffectOnWindowStructure\n    {\n        public MouseMoveToStructure mouseMoveTo;\n\n        public SimpleMouseClickAtLocation simpleMouseClickAtLocation;\n\n        public SimpleDragAndDrop simpleDragAndDrop;\n\n        public KeyboardKey keyDown;\n\n        public KeyboardKey keyUp;\n    }\n\n    public class KeyboardKey\n    {\n        public int virtualKeyCode;\n    }\n\n    public class MouseMoveToStructure\n    {\n        public Location2d location;\n    }\n\n    public class SimpleMouseClickAtLocation\n    {\n        public Location2d location;\n\n        public MouseButton mouseButton;\n    }\n\n    public class SimpleDragAndDrop\n    {\n        public Location2d startLocation;\n\n        public MouseButton mouseButton;\n\n        public Location2d endLocation;\n    }\n\n    public class Location2d\n    {\n        public Int64 x, y;\n    }\n\n    public enum MouseButton\n    {\n        left, right,\n    }\n\n    public struct ConsoleBeepStructure\n    {\n        public int frequency;\n\n        public int durationInMs;\n    }\n}\n\nclass Response\n{\n    public GameClientProcessSummaryStruct[] ListGameClientProcessesResponse;\n\n    public SearchUIRootAddressResultStructure SearchUIRootAddressResult;\n\n    public GetMemoryReadingResultStructure GetMemoryReadingResult;\n\n    public object effectExecuted;\n\n    public class GameClientProcessSummaryStruct\n    {\n        public int processId;\n\n        public string mainWindowTitle;\n\n        public int mainWindowZIndex;\n    }\n\n    public class SearchUIRootAddressResultStructure\n    {\n        public int processId;\n\n        public string uiRootAddress;\n    }\n\n    public class GetMemoryReadingResultStructure\n    {\n        public object ProcessNotFound;\n\n        public CompletedStructure Completed;\n\n        public class CompletedStructure\n        {\n            public string mainWindowId;\n\n            public string serialRepresentationJson;\n        }\n    }\n}\n\nstring serialRequest(string serializedRequest)\n{\n    var requestStructure = Newtonsoft.Json.JsonConvert.DeserializeObject<Request>(serializedRequest);\n\n    var response = request(requestStructure);\n\n    return SerializeToJsonForBot(response);\n}\n\nResponse request(Request request)\n{\n    SetProcessDPIAware();\n\n    if (request.ListGameClientProcessesRequest != null)\n    {\n        return new Response\n        {\n            ListGameClientProcessesResponse =\n                ListGameClientProcesses().ToArray(),\n        };\n    }\n\n    if (request.SearchUIRootAddress != null)\n    {\n        var uiTreeRootAddress = FindUIRootAddressFromProcessId(request.SearchUIRootAddress.processId);\n\n        return new Response\n        {\n            SearchUIRootAddressResult = new Response.SearchUIRootAddressResultStructure\n            {\n                processId = request.SearchUIRootAddress.processId,\n                uiRootAddress = uiTreeRootAddress?.ToString(),\n            },\n        };\n    }\n\n    if (request.GetMemoryReading != null)\n    {\n        var processId = request.GetMemoryReading.processId;\n\n        if (!GetWindowsProcessesLookingLikeEVEOnlineClient().Select(proc => proc.Id).Contains(processId))\n            return new Response\n            {\n                GetMemoryReadingResult = new Response.GetMemoryReadingResultStructure\n                {\n                    ProcessNotFound = new object(),\n                }\n            };\n\n        var process = System.Diagnostics.Process.GetProcessById(processId);\n\n        string serialRepresentationJson = null;\n\n        using (var memoryReader = new read_memory_64_bit.MemoryReaderFromLiveProcess(processId))\n        {\n            var uiTree = read_memory_64_bit.EveOnline64.ReadUITreeFromAddress(request.GetMemoryReading.uiRootAddress, memoryReader, 99);\n\n            if(uiTree != null)\n                serialRepresentationJson = Newtonsoft.Json.JsonConvert.SerializeObject(\n                    uiTree.WithOtherDictEntriesRemoved(),\n                    //  Support popular JSON parsers: Wrap large integers in a string to work around limitations there. (https://discourse.elm-lang.org/t/how-to-parse-a-json-object/4977)\n                    new read_memory_64_bit.IntegersToStringJsonConverter()\n                    );\n        }\n\n        return new Response\n        {\n            GetMemoryReadingResult = new Response.GetMemoryReadingResultStructure\n            {\n                Completed = new Response.GetMemoryReadingResultStructure.CompletedStructure\n                {\n                    mainWindowId = process.MainWindowHandle.ToInt64().ToString(),\n                    serialRepresentationJson = serialRepresentationJson,\n                },\n            },\n        };\n    }\n\n    if (request?.EffectOnWindow?.task != null)\n    {\n        var windowHandle = new IntPtr(long.Parse(request.EffectOnWindow.windowId));\n\n        ExecuteEffectOnWindow(request.EffectOnWindow.task, windowHandle, request.EffectOnWindow.bringWindowToForeground);\n\n        return new Response\n        {\n            effectExecuted = new object(),\n        };\n    }\n\n    if (request?.EffectConsoleBeepSequence != null)\n    {\n        foreach (var beep in request?.EffectConsoleBeepSequence)\n        {\n            if(beep.frequency == 0) //  Avoid exception \"\", \"-\"\n\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.Immutable;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Runtime.InteropServices;\n\n\nbyte[] SHA256FromByteArray(byte[] array)\n{\n    using (var hasher = new SHA256Managed())\n        return hasher.ComputeHash(buffer: array);\n}\n\nstring ToStringBase16(byte[] array) => BitConverter.ToString(array).Replace(\"System.Security.Cryptography.Primitives\"\n#r \"System.Security.Cryptography.Algorithms\"\n#r \"System.Linq\"\n#r \"System.Private.Uri\"\n#r \"System.Net.WebClient\"\n#r \"System.Net\"\n#r \"System.IO.Compression\"\n#r \"System.ComponentModel.Primitives\"\n#r \"System.Collections.Immutable\"\n#r \"System\"\n#r \"netstandard\"\n#r \"mscorlib\"\n\n#r \"sha256:1CE5129364865C5D50DC4ED71E330D3FF4F04054541E461ABDFE543D254307E2\"\n#r \"sha256:81110D44256397F0F3C572A20CA94BB4C669E5DE89F9348ABAD263FBD81C54B9\"\n#r \"sha256:B9B4E633EA6C728BAD5F7CBBEF7F8B842F7E10181731DBE5EC3CD995A6F60287\"\n#r \"sha256:831EF0489D9FA85C34C95F0670CC6393D1AD9548EE708E223C1AD87B51F7C7B3\"\n#r \"sha256:FE532D93F820980181F34C163E54F83726876CC9B02FEC72086FD3DC747793BC\"\n#r \"sha256:CADE001866564D185F14798ECFD077EDA6415E69D978748C19B98DDF0EE839BB\"\n#r \"sha256:5229128932E6AAFB5433B7AA5E05E6AFA3C19A929897E49F83690AB8FE273162\"\n#r \"sha256:FE8A38EBCED27A112519023A7A1216C69FE0863BCA3EF766234E972E920096C1\"\n#r "}}}}}}}],"comments":[]}